openapi: 3.1.0
x-stoplight:
  id: jtgnvlps6vbjp
info:
  title: API to delete a document based on document ID
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  '/documents/{document-id}':
    parameters:
      - schema:
          type: string
        name: document-id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-DELETE-documents-document-id
    delete:
      summary: Delete file uploaded with the document-id
      operationId: delete-documents-document-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  version:
                    type: string
                  errors:
                    type: 'null'
                  response:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
                  responseTime:
                    type: string
                x-examples:
                  example-1:
                    id: mosip.resident.document.delete
                    version: '1.0'
                    errors: null
                    response:
                      status: SUCCESS
                      message: Document deleted successfully
                    responseTime: '2022-07-25T10:21:17.658753'
              examples:
                Success:
                  value:
                    id: mosip.resident.document.delete
                    version: '1.0'
                    errors: null
                    response:
                      status: SUCCESS
                      message: Document deleted successfully
                    responseTime: '2022-07-25T10:21:17.658753'
                'Error: No document found for transaction ID':
                  value:
                    id: string
                    version: string
                    errors: null
                    response:
                      status: string
                      message: string
                    responseTime: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                Example 1:
                  value:
                    id: null
                    version: null
                    responsetime: '2022-10-07T09:22:05.631Z'
                    metadata: null
                    response: null
                    errors:
                      - errorCode: KER-ATH-401
                        message: Authentication Failed
      parameters:
        - schema:
            type: string
          in: query
          name: transactionId
          description: The transaction ID used to upload the document
          required: true
        - schema:
            type: string
          in: cookie
          name: Authorization
          required: true
          description: Authorization token is used to validate the permissions carried by the user.
        - schema:
            type: string
          in: cookie
          name: id_token
          description: ID token is used to verify which user has logged in.
      description: This API to delete an uploaded document based on the document ID.
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
